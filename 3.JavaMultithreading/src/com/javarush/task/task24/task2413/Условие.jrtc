<div class="wdghtml" taskKey="com.javarush.task.task24.task2413.big20">
<h3>Арканоид(20)</h3>
<p><strong>Отличная работа!</strong> Я добавил пару методов, а также класс <span class="text-corporate"><strong>KeyboardObserver</strong></span>.</p>
<p>Немного отдохни перед новым уровнем и поиграй.</p>
<p><strong>P.S.</strong> <em>Только не забудь отрегулировать высоту консоли.</em></p>

<hr>
<h3>Арканоид(19)</h3>
<p>Осталось совсем чуть-чуть.</p>
<p>В классе <span class="text-corporate"><strong>Arkanoid</strong></span> создай поле приватное <mark class="user">isGameOver</mark> типа <span class="text-neon">boolean</span>.</p>
<p>Реализуй метод <mark>checkBricksBump</mark>.<br />
В этом методе надо проверить &#8212; не столкнулся ли шарик с каким-нибудь из &#171;<em><strong>кирпичей</strong></em>&#171;.<br />
Для проверки столкновения используй метод <mark>isIntersec</mark>.<br />
<strong>Если шарик все-таки попал в кирпич, то:</strong><br />
а) шарик <em><strong>отлетает</strong></em> в случайном направлении:<br />
<span class="text-neon">double angle = Math.random() * 360;</span><br />
<span class="text-neon"> ball.setDirection(angle);</span><br />
б) кирпич <em><strong>умирает</strong></em> &#8212; надо удалить его из списка всех кирпичей.</p>
<p>Реализуй метод <mark>checkStandBump</mark>.<br />
В этом методе надо проверить &#8212; не ударился ли шарик о подставку.<br />
Для проверки столкновения используй метод isIntersec.<br />
Если шарик все-таки ударился о подставку, то:<br />
шарик отлетает в случайным направлении вверх:<br />
<span class="text-neon">double angle = 90 + 20 * (Math.random() &#8212; 0.5);</span><br />
<span class="text-neon"> ball.setDirection(angel);</span></p>
<p>Реализуй метод <mark>checkEndGame</mark>.<br />
Если координата y шарика больше чем высота поля игры (<mark class="user">height</mark>), значит шарик улетел вниз за границу экрана.<br />
В этом случае надо переменную <mark class="user">isGameOver</mark> установить в <span class="text-neon"><strong>true</strong></span>.</p>

<hr>
<h3>Арканоид(18)</h3>
<p>Теперь вернемся к классу <span class="text-corporate"><strong>Arkanoid</strong></span>.</p>
<p>Реализуй методы:<br />
а) <mark>move()</mark><br />
В этом методе нужно двигать все движимые объекты (<mark class="green">stand</mark><strong>, </strong><mark class="green">ball</mark>).<br />
б) <mark>draw(Canvas <strong>canvas</strong>)</mark><br />
В этом методе надо вызвать метод <mark>draw</mark> всех существующих объектов, которые его имеют.</p>

<hr>
<h3>Арканоид(17)</h3>
<p><strong> Еще подставке нужны методы:</strong><br />
а) <mark>move</mark> &#8212; см. <strong><mark class="user">move</mark></strong> в <strong><span class="text-corporate">BaseObject</span></strong><br />
Движение доски осуществляется горизонтально, поэтому мы меняем только координату <mark class="user">х</mark>.<br />
Подумай, как координата <mark class="user">х</mark> зависит от направления (<mark class="user">direction</mark>) и скорости (<mark class="user">speed</mark>). Реализуй зависимость.<br />
б) <mark>draw</mark> &#8212; см. <mark>draw</mark> в <span class="text-corporate"><strong>BaseObject</strong></span><br />
Его кодом я займусь сам.<br />
в) <mark>moveLeft()</mark> &#8212; задает постоянное движение &#171;<em><strong>подставки</strong></em>&#187; <strong>влево</strong><br />
Просто присвой правильное значение переменной <strong>direction</strong>.<br />
г) <mark>moveRight()</mark> &#8212; задает постоянное движение &#171;<em><strong>подставки</strong></em>&#187; <strong>вправо</strong><br />
Просто присвой правильное значение переменной <mark class="user">direction</mark>.</p>

<hr>
<h3>Арканоид(16)</h3>
<p>И наконец &#171;<em><strong>подставка</strong></em>&#171;!<br />
Ей понадобятся такие приватные поля:<br />
а) <mark class="user">speed</mark> (скорость шарика) типа <span class="text-neon">double</span>;<br />
б) <mark class="user">direction</mark> (<em>направление движения по оси</em> <mark class="user">x</mark>: <span class="text-user"><strong>1</strong></span> &#8212; <em>вправо</em>, <strong><span class="text-user">-1</span></strong> &#8212; <em>влево</em>, <span class="text-user"><strong>0</strong></span> &#8212; <em>начальное значение, стоим на месте</em>) типа <span class="text-neon">double</span>.</p>
<p><strong>Также создай для них геттеры.</strong></p>
<p><strong>А еще с тебя конструктор, примерно вот такой:</strong><br />
<code>public Stand(double x, double y) {<br />
  super(x, y, 3);<br />
  speed = 1;<br />
  direction = 0;<br />
}</code></p>

<hr>
<h3>Арканоид(15)</h3>
<p>Не поверишь, но и это еще не все.</p>
<p>Во-первых нужен метод <mark>setDirection</mark>,<br />
который не только устанавливает значение переменной <mark class="user">direction</mark>,<br />
но и вычисляет новые значения переменных <mark class="user">dx</mark> и <mark class="user">dy</mark>.</p>
<p><strong>Код должен выглядеть примерно так:</strong><br />
<span class="text-neon">this.direction = direction;</span><br />
<span class="text-neon"> double angel = Math.toRadians(direction);</span><br />
<span class="text-neon"> dx = Math.cos(angle) * speed;</span><br />
<span class="text-neon"> dy = -Math.sin(angle) * speed.</span></p>
<p>Во-вторых шарик может удариться о стенку.<br />
При этом он должен от нее отскочить.</p>
<p><strong>Для этого нам понадобится еще один метод:</strong><br />
<mark>void checkRebound(int <strong>minx</strong>, int <strong>maxx</strong>, int <strong>miny</strong>, int <strong>maxy</strong>)</mark></p>
<p>Создай его, а кодом я займусь сам.</p>

</div>
